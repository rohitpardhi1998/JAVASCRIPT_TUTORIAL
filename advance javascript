Promise function ():

stage 1 pending
stage 2 fulfill   
stage 3 reject 

Promise is methode()

 
if promise id fullfilled then it resolves
if promise is failed then reject 

then() will be used when promise resolve

catch() function will be used when reject 
then and catch are predefined call back fucntion used on certain sitiuation 

let prom = new Promise(); // promise objcet 
let prom = new Promise(function(resolve,reject){
if(){
resolve();
}
else{
reject();
}
});

let onfulfilment =(result)=>
{
console.log(result);
}

let onrejection =(error)=>
{
console.log(error);
}


prom.then(onfulfillment)
prom.catch(onrejecfunction )

=================================================================================================

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <script>
    
       let prom = new Promise(function(resolve,reject){
         if(condition){
             resolve();
         }  else{
             reject();
         }
       }) 

      let onfulfillment =(result) =>{
console.log(result);
      } 
      let onrejection = (error) => {
            console.log(error);
        }

        prom.then(onfulfillment);
        prom.catch(onrejection);
    </script>
</body>
</html>
================================================================================================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <script>
        function prom(complete){
            return new Promise(function (resolve, reject) {
                if (complete) {
                    resolve("i am succesfull");
                } else {
                    reject("i am failed");
                }
            })
        }

    let onfulfilment = (result) => {
        console.log(result);
    }

    let onrejection = (error) => {
        console.log(error);
    }
        //let complete =true;
    prom(true).then(onfulfilment)   
    
    prom(true).catch(onrejection)  
      //  console.log(prom(true));
    </script>
</body>
</html>
===============================================================================================
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>

<body>
    <script>
        function prom(a,b) {
            return new Promise(function (resolve, reject) {
               let c = a/b;
               setTimeout(()=> {
                   if (a, b) {
                       resolve("i am succesfull"+c);
                   } else {
                       reject("i am failed");
                   }
               },2000);
              
            })
        }

        
      
        
        //let complete =true;
        prom(5,2).then((result)=>{
            console.log(result);
        }).catch((error)=>{
            console.log(error); 
        })

        prom(true)
      //  console.log(prom(true));
    </script>
</body>

</html>
======================================================================================

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <script>
       var a =12;
       var b=44;
        var d =a+b;
       let prom = new Promise(function(resolve,reject){
             console.log("we are waiting 5 second ")
            setTimeout(function(){
              
                if (d >= 40) {
                    resolve("this is correct ansere " + d);
                } else {
                    reject("value isnot corect ");
                }
            },5000)
           
       })
       let onfulfillment= (result) =>{
           console.log(result)
       }
       let onrejection = (error) => {
            console.log(error)
        }
      //prom.then(onfulfillment)
     // prom.catch(onrejection)
       prom.then((result) => {
           console.log(result)
       })
       .catch((error) => {
           console.log(error);
       })
   
    </script>
</body>
</html>
=============================================================================================

3 .Fetch function 

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>

<body>
    <script>
        fetch("./vv.txt")
        .then((response) => {
            return response.text()
        }).then((result) => {
            console.log(result);
        }).catch((error) => {
            console.log(erro);
        })

    </script>
</body>

</html>

==========================================================================================

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <script>
        fetch("https://jsonplaceholder.typicode.com/users")
          .then((response) => {
                return response.json()
            }).then((data) => {
                for(var x in data){
                    document.write(`Name is ${data[x].name}  and email  is : ${data[x].email}<br/>`);
                }
                
            }).catch((error) => {
                console.log(error);
            })
    </script>
</body>
</html>

========================================================================================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <script>
const data = {
name:"rohit",
email:"ropardhi@in.ibm.com"    
}
        fetch("https://jsonplaceholder.typicode.com/users",{
                   
method: 'POST', // or 'PUT'
  headers: {
    'Content-Type': 'application/json',
  },
  body: JSON.stringify(data),
})
          .then((response) => {
                return response.json()
            }).then((data) => {
                  console.log(data);
            }).catch((error) => {
                console.log(error);
            })
    </script>
</body>
</html>

===============================================================================================
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>

<body>
    <script>
       
        fetch('https://jsonplaceholder.typicode.com/posts', {
                method: 'POST',
                body: JSON.stringify({
                    title: 'foo',
                    body: 'bar',
                    userId: 1,
                }),
                headers: {
                    'Content-type': 'application/json; charset=UTF-8',
                },
            })
            .then((response) => {
                return response.json()
            }).then((data) => {
                  console.log(data);
            }).catch((error) => {
                console.log(error);
            })
    </script>
</body>

</html>
=========================================================================================================
ASYNC AND AWAIT FUNCTION

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <script>
  async function test(){
        console.log("A ");
        console.log("B ");
     await   console.log("C ");
        console.log("D ");
    }
   
     test();
      console.log("F");
        console.log("E ");
   
  
    </script>
</body>
</html>
